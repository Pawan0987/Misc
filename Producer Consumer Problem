#include <pthread.h>
#include <semaphore.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define BUFFER_SIZE 5 
#define MAX_ITEMS 20   

int buffer[BUFFER_SIZE]; 
int front = 0, rear = 0; 
pthread_mutex_t mutex;     
sem_t full, empty;         
void *producer(void *arg) {
    int item;
    for (int i = 0; i < MAX_ITEMS; i++) {
        item = rand() % 100; 
        sem_wait(&empty);     
        pthread_mutex_lock(&mutex);
        buffer[rear] = item;  
        rear = (rear + 1) % BUFFER_SIZE;
        printf("Produced item: %d\n", item);
        pthread_mutex_unlock(&mutex);
        sem_post(&full);     
        sleep(1);           
    }
    pthread_exit(NULL);
}

void *consumer(void *arg) {
    int item;
    for (int i = 0; i < MAX_ITEMS; i++) {
        sem_wait(&full);     
        pthread_mutex_lock(&mutex);
        item = buffer[front];  
        front = (front + 1) % BUFFER_SIZE;
        printf("Consumed item: %d\n", item);
        pthread_mutex_unlock(&mutex);
        sem_post(&empty);     
        sleep(2);             
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t prod, cons;      
    pthread_mutex_init(&mutex, NULL);
    sem_init(&full, 0, 0);      
    sem_init(&empty, 0, BUFFER_SIZE); 

    
    for (int i = 0; i < MAX_ITEMS; i++) {
        pthread_create(&prod, NULL, producer, NULL);
        pthread_create(&cons, NULL, consumer, NULL);
        pthread_join(prod, NULL);
        pthread_join(cons, NULL);
    }
    
    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);
    pthread_join(prod, NULL);
    pthread_join(cons, NULL);
    
    sem_wait(&empty);    
    pthread_mutex_lock(&mutex);
    buffer[front] = 10;
    front = (front + 1) % BUFFER_SIZE;
    printf("Produced item: %d\n", 10);
    pthread_mutex_unlock(&mutex);
    sem_post(&full);      
    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);
    pthread_join(prod, NULL);
    pthread_join(cons, NULL);

    pthread_mutex_destroy(&mutex);
    sem_destroy(&full);    
    sem_destroy(&empty);    
    return 0;
}
