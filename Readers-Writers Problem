#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

#define N_READERS 5
#define N_WRITERS 2

int shared_variable = 0;
int reader_count = 0;

pthread_mutex_t mutex;
sem_t reader_sem, writer_sem;

void *reader(void *arg) {
    int id = *(int *)arg;

    while (1) {
        pthread_mutex_lock(&mutex);
        reader_count++;
        if (reader_count == 1) {
            sem_wait(&writer_sem);
        }
        pthread_mutex_unlock(&mutex);

        sem_wait(&reader_sem);
        printf("Reader %d read shared variable: %d\n", id, shared_variable);
        sem_post(&reader_sem);

        pthread_mutex_lock(&mutex);
        reader_count--;
        if (reader_count == 0) {
            sem_post(&writer_sem);
        }
        pthread_mutex_unlock(&mutex);

        sleep(1);
    }

    pthread_exit(NULL);
}

void *writer(void *arg) {
    int id = *(int *)arg;

    while (1) {
        sem_wait(&writer_sem);
        printf("Writer %d is writing shared variable: %d\n", id, ++shared_variable);
        sem_post(&writer_sem);

        sleep(1);
    }

    pthread_exit(NULL);
}

int main() {
    pthread_t readers[N_READERS], writers[N_WRITERS];
    int reader_ids[N_READERS], writer_ids[N_WRITERS];
    int i;

    pthread_mutex_init(&mutex, NULL);
    sem_init(&reader_sem, 0, 1);
    sem_init(&writer_sem, 0, 1);

    for (i = 0; i < N_READERS; i++) {
        reader_ids[i] = i;
        pthread_create(&readers[i], NULL, reader, &reader_ids[i]);
    }

    for (i = 0; i < N_WRITERS; i++) {
        writer_ids[i] = i;
        pthread_create(&writers[i], NULL, writer, &writer_ids[i]);
    }

    for (i = 0; i < N_READERS; i++) {
        pthread_join(readers[i], NULL);
    }

    for (i = 0; i < N_WRITERS; i++) {
        pthread_join(writers[i], NULL);
    }

    pthread_mutex_destroy(&mutex);
    sem_destroy(&reader_sem);
    sem_destroy(&writer_sem);

    return 0;
}
